// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

enum UserRole {
    ADMIN
    EMPLOYEE
    USER
}

model Account {
    id                String  @id @default(uuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model User {
    id            String    @id @default(uuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    password      String?
    image         String?
    role          UserRole  @default(USER)
    lastSeen      DateTime  @default(now()) @map("last_seen")
    createdAt     DateTime  @default(now()) @map("created_at")

    accounts Account[]
    Booking  Booking[]
}

model VerificationToken {
    id       String   @id @default(uuid())
    email    String
    token    String   @unique
    expires  DateTime
    issuedAt DateTime @default(now()) @map("issued_at")

    @@unique([email, token])
}

model PasswordResetToken {
    id       String   @id @default(uuid())
    email    String
    token    String   @unique
    expires  DateTime
    issuedAt DateTime @default(now()) @map("issued_at")

    @@unique([email, token])
}

model Appointment {
    id        String   @id @default(uuid())
    startTime DateTime @unique @map("start_time")

    Booking Booking?

    @@index([id])
}

model Issue {
    id          String @id @default(uuid())
    name        String
    description String

    bookings Booking[]
}

model Booking {
    id            String   @id @default(uuid())
    description   String
    issueId       String   @map("issue_id")
    appointmentId String   @unique @map("appointment_id")
    userId        String   @map("user_id")
    createdAt     DateTime @default(now())

    Issue       Issue       @relation(fields: [issueId], references: [id])
    Appointment Appointment @relation(fields: [appointmentId], references: [id])
    User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([issueId])
    @@index([appointmentId])
    @@index([userId])
}

model Configuration {
    name  String @id @unique
    value Int
}
